trigger:
- main  # Trigger the pipeline on changes to the main branch

pool:
  vmImage: 'ubuntu-latest'  # Use an Ubuntu agent (you can also use 'windows-latest')

variables:
  terraformVersion: '1.10.5'  # Specify the Terraform version
  azureServiceConnection: 'smsinfra'  # Replace with your Azure service connection name
  storageAccountName: 'smsstrgprd'  # Name of the storage account
  containerName: 'devops'  # Name of the container
  key: 'terraform.tfstate'  # Name of the state file

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'  # Python is required for the Terraform task

- task: TerraformInstaller@0
  inputs:
    terraformVersion: $(terraformVersion)  # Install the specified Terraform version

- task: AzureCLI@2
  inputs:
    azureSubscription: $(azureServiceConnection)  # Authenticate using the Azure service connection
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo "Logged into Azure using service connection: $(azureServiceConnection)"
      az account show  # Display the Azure subscription details

- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(Build.SourcesDirectory)'  # Initialize Terraform in the repo root
    backendServiceArm: $(azureServiceConnection)
    backendAzureRmResourceGroupName: $(resourceGroupName)  # Resource group of the storage account
    backendAzureRmStorageAccountName: $(storageAccountName)  # Name of the storage account
    backendAzureRmContainerName: $(containerName)  # Name of the container
    backendAzureRmKey: $(key)

- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'validate'
    workingDirectory: '$(Build.SourcesDirectory)'  # Validate the Terraform configuration
    environmentServiceNameAzureRM: $(azureServiceConnection)

- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(Build.SourcesDirectory)'  # Generate the Terraform plan
    environmentServiceNameAzureRM: $(azureServiceConnection)

- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: '$(Build.SourcesDirectory)'  # Apply the Terraform configuration
    environmentServiceNameAzureRM: $(azureServiceConnection)  # Use the Azure service connection for authentication
    commandOptions: '-auto-approve'  # Automatically approve the apply step